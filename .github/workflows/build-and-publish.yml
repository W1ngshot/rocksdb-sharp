name: Build and Publish RocksDbSharp.Transactional

on:
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libsnappy-dev zlib1g-dev libbz2-dev liblz4-dev libzstd-dev

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install cmake snappy zstd lz4 zlib

      - name: Show RocksDB version
        run: |
          echo "RocksDB version to build:"
          cat rocksdbversion

      - name: Make build script executable
        run: chmod +x build-rocksdb.sh
        working-directory: build-native

      - name: Build native library
        run: ./build-rocksdb.sh
        working-directory: build-native
        shell: bash

      - name: Pack NuGet (only once)
        if: matrix.os == 'ubuntu-latest'
        run: |
          dotnet restore
          dotnet build -c Release
          dotnet pack -c Release \
            -p:PackageVersion=1.0.1 \
            -p:PackageId=RocksDbSharp.Transactional \
            --output ./nupkg
        working-directory: csharp

      - name: Upload package artifact
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: rocksdbsharp-nuget
          path: csharp/nupkg/*.nupkg

  publish:
    name: Publish to GitHub Packages
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download built package
        uses: actions/download-artifact@v4
        with:
          name: rocksdbsharp-nuget
          path: ./nupkg

      - name: Publish to GitHub Packages
        run: |
          dotnet nuget push ./nupkg/*.nupkg \
            --source "github" \
            --api-key ${{ secrets.GITHUB_TOKEN }}
